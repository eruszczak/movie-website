# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-12-10 12:28
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import shared.helpers
import shared.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CastTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField(default=0)),
                ('character', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='CrewTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job', models.IntegerField(blank=True, choices=[(0, 'Director'), (1, 'Screenplay'), ('Creator', 2)], null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='')),
                ('picture_path', models.CharField(blank=True, max_length=300, null=True)),
            ],
            bases=(shared.models.FolderPathMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Popular',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_date', models.DateField(unique=True)),
            ],
            options={
                'ordering': ('-update_date',),
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField()),
                ('rate_date', models.DateField()),
                ('inserted_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ('-rate_date', '-inserted_date'),
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release_date', models.DateField(blank=True, null=True)),
                ('number', models.SmallIntegerField(default=1)),
                ('episodes', models.SmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('source', django.contrib.postgres.fields.jsonb.JSONField(blank=True)),
                ('type', models.IntegerField(blank=True, choices=[(0, 'Movie'), (1, 'TV Shows')], null=True)),
                ('tmdb_id', models.CharField(max_length=10, unique=True)),
                ('imdb_id', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=350)),
                ('overview', models.TextField(blank=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('runtime', models.IntegerField(blank=True, null=True)),
                ('poster_path', models.CharField(max_length=300)),
                ('poster_backdrop_title', models.ImageField(blank=True, null=True, upload_to='')),
                ('poster_backdrop_user', models.ImageField(blank=True, null=True, upload_to='')),
                ('poster_small', models.ImageField(blank=True, null=True, upload_to='')),
                ('poster_card', models.ImageField(blank=True, null=True, upload_to='')),
                ('cast', models.ManyToManyField(blank=True, related_name='cast', through='titles.CastTitle', to='titles.Person')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='titles', to='titles.Collection')),
                ('crew', models.ManyToManyField(blank=True, related_name='crew', through='titles.CrewTitle', to='titles.Person')),
                ('genres', models.ManyToManyField(to='titles.Genre')),
                ('keywords', models.ManyToManyField(blank=True, to='titles.Keyword')),
                ('recommendations', models.ManyToManyField(blank=True, related_name='recommends', to='titles.Title')),
                ('similar', models.ManyToManyField(blank=True, related_name='similars', to='titles.Title')),
            ],
            options={
                'ordering': (),
            },
            bases=(shared.models.FolderPathMixin, models.Model),
        ),
        migrations.AddField(
            model_name='season',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='titles.Title'),
        ),
        migrations.AddField(
            model_name='rating',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='titles.Title'),
        ),
        migrations.AddField(
            model_name='rating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='popular',
            name='titles',
            field=models.ManyToManyField(blank=True, related_name='popular', to='titles.Title'),
        ),
        migrations.AddField(
            model_name='crewtitle',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='titles.Person'),
        ),
        migrations.AddField(
            model_name='crewtitle',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='titles.Title'),
        ),
        migrations.AddField(
            model_name='casttitle',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='titles.Person'),
        ),
        migrations.AddField(
            model_name='casttitle',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='titles.Title'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together=set([('user', 'title', 'rate_date')]),
        ),
    ]
